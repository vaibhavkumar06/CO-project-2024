import sys
import keyword

Registers={"00000":"00000000000000000000000000000000",
           "00001":"00000000000000000000000000000000",
           "00010":"00000000000000000000000000000000",
           "00011":"00000000000000000000000000000000",
           "00100":"00000000000000000000000000000000",
           "00101":"00000000000000000000000000000000",
           "00110":"00000000000000000000000000000000",
           "00111":"00000000000000000000000000000000",
           "01000":"00000000000000000000000000000000",
           "01000":"00000000000000000000000000000000",
           "01001":"00000000000000000000000000000000",
           "01010":"00000000000000000000000000000000",
           "01011":"00000000000000000000000000000000",
           "01100":"00000000000000000000000000000000",
           "01101":"00000000000000000000000000000000",
           "01110":"00000000000000000000000000000000",
           "01111":"00000000000000000000000000000000",
           "10000":"00000000000000000000000000000000",
           "10001":"00000000000000000000000000000000",
           "10010":"00000000000000000000000000000000",
           "10011":"00000000000000000000000000000000",
           "10100":"00000000000000000000000000000000",
           "10101":"00000000000000000000000000000000",
           "10110":"00000000000000000000000000000000",
           "10111":"00000000000000000000000000000000",
           "11000":"00000000000000000000000000000000",
           "11001":"00000000000000000000000000000000",
           "11010":"00000000000000000000000000000000",
           "11011":"00000000000000000000000000000000",
           "11100":"00000000000000000000000000000000",
           "11101":"00000000000000000000000000000000",
           "11110":"00000000000000000000000000000000",
           "11111":"00000000000000000000000000000000"}

def decimal_to_binary_32(decimal):
    decimal=int(decimal)
    return "0b"+bin(decimal)[2:].zfill(32) 

def binary_to_decimal(binary):
    return int(binary, 2)

def twos_to_decimal(binary):
    if binary[0] == '1':
        inverted_bits = ''.join('1' if bit == '0' else '0' for bit in binary)
        binary = bin(int(inverted_bits, 2) + 1)[2:]
        binary = binary.zfill(len(inverted_bits))
        return -int(binary, 2)
    return int(binary, 2)

def decimal_to_binary_with_sign_extension(decimal, num_bits=32):
        if decimal < 0:
            binary = bin(decimal & int("1"*num_bits, 2))[2:]
        else:
            binary = bin(decimal)[2:]
        if len(binary) < num_bits:
            binary = "0" * (num_bits - len(binary)) + binary
        elif len(binary) > num_bits:
            binary = binary[-num_bits:]
        return binary

mem_address = {}
for i in range(32):
    bin_str = "0x"+hex(65536+(4*i))[2:].zfill(8) 
    mem_address[bin_str] ="0000000000000000"
input = []
for i in sys.stdin:
    i = i.rstrip() 
    words = i.split()
    input.append(words)
pc=0
while pc<len(input):
    op=input[pc][0]
    op=op[25:32]
    i=input[pc][0]

    if op=="0110011": 
        p=pc
        reg=i[20:25]
        reg1=i[12:17]
        reg2=i[7:12]
        if i[17:20]=="000" and i[0:7]=="0000000":
           Registers[reg]=decimal_to_binary_32( binary_to_decimal(Registers[reg1])  +   binary_to_decimal(Registers[reg2])   )
           pc=pc+4
        elif [0:7]=="0100000":
            if reg1=="00000":
                Registers[reg]= decimal_to_binary_with_sign_extension(int(reg2))
                pc=pc+4
            else:
                Registers[reg]= decimal_to_binary_32( binary_to_decimal(signed(Registers[reg1])) - binary_to_decimal(signed(Registers[reg2])) )
                pc=pc+4




































print(decimal_to_binary_32(p),end=" ")
    for j in Registers.values():
        print(j,end=" ")
    print()
for k in mem_address.values():
    print(k)
